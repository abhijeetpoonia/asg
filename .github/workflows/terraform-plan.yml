name: Terraform Plan

on:
  pull_request:
    branches:
      - prod

permissions:
  pull-requests: write
  contents: read

jobs:
  terraform-plan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout terraform repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Terraform Init
        run: |
          cd enviroments/prod
          terraform init

      - name: Terraform Plan
        id: plan
        run: |
          cd enviroments/prod
          
          # Enable debug logging
          export TF_LOG=DEBUG
          
          # Create plan.txt file to store the plan output
          touch plan.txt
          
          # Run Terraform Plan
          terraform plan -input=false -no-color -detailed-exitcode > plan.txt 2>&1
          TERRAFORM_EXIT_CODE=$?
          
          # Print the plan output for debugging
          echo "Plan output:"
          cat plan.txt
          echo "Exit code: $TERRAFORM_EXIT_CODE"
          
          # Add plan output to GitHub env
          echo "PLAN<<EOF" >> $GITHUB_ENV
          cat plan.txt >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
          # Set the outcome based on the exit code
          if [ $TERRAFORM_EXIT_CODE -eq 0 ]; then
            echo "plan_outcome=No changes detected in plan" >> $GITHUB_ENV
          elif [ $TERRAFORM_EXIT_CODE -eq 2 ]; then
            echo "plan_outcome=Changes detected in plan" >> $GITHUB_ENV
          else
            echo "plan_outcome=Error during plan" >> $GITHUB_ENV
            exit 1
          fi

      - name: Add Plan Comment
        uses: actions/github-script@v6
        if: always()
        env:
          PLAN: ${{ env.PLAN }}
          PLAN_OUTCOME: ${{ env.plan_outcome }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Plan üîç
            **Result:** ${process.env.PLAN_OUTCOME}
            
            <details><summary>Show Plan</summary>
            
            \`\`\`terraform
            ${process.env.PLAN}
            \`\`\`
            </details>`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.name,
              body: output
            })
