name: Terraform Plan

on:
  pull_request:
    branches:
      - prod

permissions:
  pull-requests: write
  contents: read

jobs:
  terraform-plan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout terraform repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Terraform Init
        run: |
          cd environments/prod
          terraform init

      - name: Terraform Plan
        id: plan
        run: |
          set -o pipefail  # Ensure errors are caught correctly
          cd environments/prod

          # Run terraform plan and store output
          terraform plan -input=false -no-color -detailed-exitcode > plan.txt 2>&1
          exit_code=${PIPESTATUS[0]}  # Capture correct exit code

          # Print plan output for debugging
          echo "Terraform Plan Output:"
          cat plan.txt

          # Add plan output to GitHub environment
          echo "PLAN<<EOF" >> $GITHUB_ENV
          cat plan.txt >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          # Handle Terraform exit codes properly
          if [[ "$exit_code" -eq 2 ]]; then
            echo "Changes detected in plan"
          elif [[ "$exit_code" -eq 0 ]]; then
            echo "No changes detected in plan"
          else
            echo "Error during plan"
            exit 1
          fi

      - name: Add Plan Comment
        if: always()  # Ensures this step runs even if Terraform Plan fails
        uses: actions/github-script@v6
        env:
          PLAN: ${{ env.PLAN }}
        with:
          github-token: ${{ secrets.TOKEN }}
          script: |
            const output = `#### Terraform Plan Output

            <details><summary>Show Plan</summary>

            \`\`\`terraform
            ${process.env.PLAN}
            \`\`\`
            </details>`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.name,
              body: output
            })
